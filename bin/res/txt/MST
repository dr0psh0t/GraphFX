private static int size;
	
	/*
	 * A utility function to find the vertex with minimum key
	 * value, from the set of vertices not yet included in MST
	 */
	private int minKey(int key[], boolean[] mstSet)
	{
	   // Initialize min value
	   int min = Integer.MAX_VALUE,
			   min_index = -1;

	   for(int v = 0; v < size; v++)
	   {
	       if(mstSet[v] == false && key[v] < min)
	       {
	           min = key[v];
	           min_index = v;
	       }
	   }
	   return min_index;
	}
	
	//	A utility function to print the constructed MST stored in parent[]
	private void printMST(int[] parent, int[][] graph)
	{
		System.out.println("Edge   Weight");
		int weight;
		
		for(int i = 1; i < size; ++i)
		{
			weight = graph[i][parent[i]];
			System.out.println((weight > 0) ? (parent[i]+" - "+ i+"    "+graph[i][parent[i]]) : "");
		}
	}
	
	public void minimumSpanningTree(int[][] graph)
	{
		size = graph.length;
		
		// Array to store constructed MST
		int parent[] = new int[size];

		// Key values used to pick minimum weight edge in cut
		int key[] = new int[size];
		
		// To represent set of vertices not yet included in MST
		boolean[] mstSet = new boolean[size];
		
		//	initialize all keys as Infinite
		for(int i = 0; i < size; ++i)
		{
			key[i] = Integer.MAX_VALUE;
			mstSet[i] = false;
		}
		
		/*
		 * Always include first 1st vertex in MST.
		 * Make key 0 so that this vertex is
		 * picked as first vertex
		 */
		key[0] = 0;
		
		// First node is always root of MST
		parent[0] = -1;
		
		// The MST will have V vertices
		for(int count = 0; count < (size - 1); ++count)
		{
			/*
			 * Pick thd minimum key vertex from the set of vertices
			 * not yet included in MST
			 */
			int u = minKey(key, mstSet);
			
			// Add the picked vertex to the MST Set
			mstSet[u] = true;
			
			/*
			 * Update key value and parent index of the adjacent
			 * vertices of the picked vertex. Consider only those
			 * vertices which are not yet included in MST
			 */
			for(int v = 0; v < size; ++v)
			{
				int weight = graph[u][v];
				if((weight != 0) && (mstSet[v] == false) && (weight < key[v]))
				{
					parent[v] = u;
					key[v] = weight;
				}
			}
		}
		
		// print the constructed MST
		printMST(parent, graph);
	}